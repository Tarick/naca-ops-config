fullnameOverride: "postgres-operator"
# general configuration parameters
configGeneral:
  # number of routines the operator spawns to process requests concurrently
  workers: 1

configTarget: "OperatorConfigurationCRD"

# parameters describing Postgres users
configUsers:
  # postgres username used for replication between instances
  replication_username: standby
  # postgres superuser name to be created by initdb
  super_username: postgres

configKubernetes:
  # toggles pod anti affinity on the Postgres pods
  enable_pod_antiaffinity: false

# configure resource requests for the Postgres pods
configPostgresPodResources:
  # CPU limits for the postgres containers
  default_cpu_limit: "1"
  # CPU request value for the postgres containers
  default_cpu_request: 100m
  # memory limits for the postgres containers
  default_memory_limit: 500Mi
  # memory request value for the postgres containers
  default_memory_request: 500Mi
  # hard CPU minimum required to properly run a Postgres cluster
  min_cpu_limit: 250m
  # hard memory minimum required to properly run a Postgres cluster
  min_memory_limit: 250Mi

# automate creation of human users with teams API service
configTeamsApi:
  # team_admin_role will have the rights to grant roles coming from PG manifests
  # enable_admin_role_for_users: "true"

  # toggle to grant superuser to team members created from the Teams API
  # enable_team_superuser: "false"

  # toggles usage of the Teams API by the operator
  enable_teams_api: false
  # should contain a URL to use for authentication (username and token)
  # pam_configuration: https://info.example.com/oauth2/tokeninfo?access_token= uid realm=/employees

  # operator will add all team member roles to this group and add a pg_hba line
  # pam_role_name: zalandos

  # List of teams which members need the superuser role in each Postgres cluster
  # postgres_superuser_teams: "postgres_superusers"

  # List of roles that cannot be overwritten by an application, team or infrastructure role
  # protected_role_names: "admin"

  # role name to grant to team members created from the Teams API
  # team_admin_role: "admin"

  # postgres config parameters to apply to each team member role
  # team_api_role_configuration: "log_statement:all"

  # URL of the Teams API service
  # teams_api_url: http://fake-teams-api.default.svc.cluster.local

# configure connection pooler deployment created by the operator
configConnectionPooler:
  # db schema to install lookup function into
  connection_pooler_schema: pooler
  # db user for pooler to use
  connection_pooler_user: pooler
  # docker image
  connection_pooler_image: "registry.opensource.zalan.do/acid/pgbouncer:master-7"
  # max db connections the pooler should hold
  connection_pooler_max_db_connections: 100
  # default pooling mode
  # connection_pooler_mode: "transaction"
  connection_pooler_mode: "session"
  # number of pooler instances
  connection_pooler_number_of_instances: 2
  # default resources
  connection_pooler_default_cpu_request: 500m
  connection_pooler_default_memory_request: 100Mi
  connection_pooler_default_cpu_limit: "1"
  connection_pooler_default_memory_limit: 100Mi

resources:
  limits:
    cpu: 500m
    memory: 500Mi
  requests:
    cpu: 100m
    memory: 250Mi
