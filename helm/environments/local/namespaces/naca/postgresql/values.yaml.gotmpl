---

# postgresqlExtendedConf:
#   max_connections: 10
#   shared_buffers: 10MB

persistence:
  # enabled: false
  enabled: true
  ## A manually managed Persistent Volume and Claim
  ## If defined, PVC must be created manually before volume will be bound
  ## The value is evaluated as a template, so, for example, the name can depend on .Release or .Chart
  ##
  ## existingClaim: 

  ## The path the volume will be mounted at, useful when using different
  ## PostgreSQL images.
  ##
  mountPath: /bitnami/postgresql

  # ## The subdirectory of the volume to mount to, useful in dev environments
  # ## and one PV for multiple services.
  # ##
  # subPath: ""

  # # storageClass: "-"
  # accessModes:
  #   - ReadWriteOnce
  # size: 10Gi
  # # annotations: {}
  # storageClass: "standard"
#   accessModes:
#     - ReadWriteOnce
#   size: 8Gi
## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    memory: "400Mi"
    cpu: "8"
  requests:
    memory: "400Mi"
    cpu: "50m"

postgresqlPassword: "BlaBla_12"
networkPolicy:
  ## Enable creation of NetworkPolicy resources. Only Ingress traffic is filtered for now.
  ##
  enabled: true
  
  ## The Policy model to apply. When set to false, only pods with the correct
  ## client label will have network access to the port PostgreSQL is listening
  ## on. When true, PostgreSQL will accept connections from any source
  ## (with the correct destination port).
  ##
  allowExternal: false

  ## if explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
  ## and that match other criteria, the ones that have the good label, can reach the DB.
  ## But sometimes, we want the DB to be accessible to clients from other namespaces, in this case, we can use this
  ## LabelSelector to select these namespaces, note that the networkPolicy's namespace should also be explicitly added.
  ##
  ## Example:
  ## explicitNamespacesSelector:
  ##   matchLabels:
  ##     role: frontend
  ##   matchExpressions:
  ##    - {key: role, operator: In, values: [frontend]}
  ## 